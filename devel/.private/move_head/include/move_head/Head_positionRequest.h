// Generated by gencpp from file move_head/Head_positionRequest.msg
// DO NOT EDIT!


#ifndef MOVE_HEAD_MESSAGE_HEAD_POSITIONREQUEST_H
#define MOVE_HEAD_MESSAGE_HEAD_POSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_head
{
template <class ContainerAllocator>
struct Head_positionRequest_
{
  typedef Head_positionRequest_<ContainerAllocator> Type;

  Head_positionRequest_()
    : HeadYaw(0.0)
    , HeadPitch(0.0)  {
    }
  Head_positionRequest_(const ContainerAllocator& _alloc)
    : HeadYaw(0.0)
    , HeadPitch(0.0)  {
  (void)_alloc;
    }



   typedef double _HeadYaw_type;
  _HeadYaw_type HeadYaw;

   typedef double _HeadPitch_type;
  _HeadPitch_type HeadPitch;





  typedef boost::shared_ptr< ::move_head::Head_positionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_head::Head_positionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Head_positionRequest_

typedef ::move_head::Head_positionRequest_<std::allocator<void> > Head_positionRequest;

typedef boost::shared_ptr< ::move_head::Head_positionRequest > Head_positionRequestPtr;
typedef boost::shared_ptr< ::move_head::Head_positionRequest const> Head_positionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_head::Head_positionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_head::Head_positionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_head::Head_positionRequest_<ContainerAllocator1> & lhs, const ::move_head::Head_positionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.HeadYaw == rhs.HeadYaw &&
    lhs.HeadPitch == rhs.HeadPitch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_head::Head_positionRequest_<ContainerAllocator1> & lhs, const ::move_head::Head_positionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_head

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::move_head::Head_positionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_head::Head_positionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_head::Head_positionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_head::Head_positionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_head::Head_positionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_head::Head_positionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_head::Head_positionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09353ab7b162a9d3424b1b078b9907f1";
  }

  static const char* value(const ::move_head::Head_positionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09353ab7b162a9d3ULL;
  static const uint64_t static_value2 = 0x424b1b078b9907f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::move_head::Head_positionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_head/Head_positionRequest";
  }

  static const char* value(const ::move_head::Head_positionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_head::Head_positionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# yaw desired and pitch desired rotation \n"
"float64 HeadYaw\n"
"float64 HeadPitch\n"
;
  }

  static const char* value(const ::move_head::Head_positionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_head::Head_positionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.HeadYaw);
      stream.next(m.HeadPitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Head_positionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_head::Head_positionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_head::Head_positionRequest_<ContainerAllocator>& v)
  {
    s << indent << "HeadYaw: ";
    Printer<double>::stream(s, indent + "  ", v.HeadYaw);
    s << indent << "HeadPitch: ";
    Printer<double>::stream(s, indent + "  ", v.HeadPitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_HEAD_MESSAGE_HEAD_POSITIONREQUEST_H
